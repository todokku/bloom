services:
  - docker:dind

stages:
  - test
  - build
  - package
  - release

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml # https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html
  - template: License-Management.gitlab-ci.yml # https://gitlab.com/help/user/application_security/license_compliance/index

variables:
  # Go
  GO_IMAGE: golang:latest

  # mobile
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"
  FLUTTER_VERSION: "https://storage.googleapis.com/flutter_infra/releases/dev/linux/flutter_linux_v1.14.6-dev.tar.xz"

  # desktop
  NODE_ENV: test
  NODE_VERSION: lts

  # server
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres
  POSTGRES_HOST: postgres
  POSTGRES_VERSION: 11
  DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
  HOST: http://localhost:8000
  AWS_SECRET_ACCESS_KEY: test
  AWS_ACCESS_KEY_ID: test
  AWS_REGION: test
  S3_BUCKET: test
  S3_BASE_URL: test
  SENTRY_SERVER_URL: test
  SENTRY_WEBAPP_URL: test
  SMTP_HOST: test
  SMTP_USERNAME: test
  SMTP_PASSWORD: test
  STRIPE_PUBLIC_KEY: test
  STRIPE_SECRET_KEY: test

# cache:
#   paths:
#     - cargo_home/
#     - core/target/
#     - desktop/node_modules/
#     - website/node_modules/
#     - server/target/

####################################################################################################
## Test
####################################################################################################

test:core:
  stage: test
  image: $GO_IMAGE
  tags:
    - docker
  script:
    - cd core
    - make test


test:mobile:
  stage: test
  image: openjdk:8-jdk
  tags:
    - docker
  script:
    - cd mobile
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 build-essential
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    # flutter sdk setup
    - cd $HOME && wget --output-document=flutter-sdk.tar.xz $FLUTTER_VERSION
        && tar -xf flutter-sdk.tar.xz && export PATH=$PATH:$HOME/flutter/bin
        && cd -
    - echo flutter.sdk=$HOME/flutter > android/local.properties
    - flutter config --no-analytics
    - make assets
    - make fmt_check
    - make lint
    - make test


# test:desktop:
#   stage: test
#   image: node:$NODE_VERSION
#   tags:
#     - docker
#   script:
#     - cd desktop
#     - make assets
#     - make install
#     #- make test
#     - make lint

# test:server:
#   stage: test
#   image: $RUST_IMAGE
#   tags:
#     - docker
#   script:
#     - cd server
#     - apt update && apt install -y gcc make git
#     - rustup default $RUST_VERSION
#     - rustup component add rustfmt clippy
#     - cp bloom.default.sane bloom.sane
#     - make assets
#     - make fmt_check
#     - make lint
#     - make test
#   services:
#     - postgres:$POSTGRES_VERSION

test:server:
  stage: test
  image: $GO_IMAGE
  tags:
    - docker
  script:
    - cp bloom.default.sane bloom.sane
    - make test
  services:
    - postgres:$POSTGRES_VERSION

test:website:
  stage: test
  image: node:lts
  tags:
    - docker
  script:
    - cd website/
    - make install
    - make lint

# test:bitflow:
#   stage: test
#   image: $RUST_IMAGE
#   tags:
#     - docker
#   script:
#     - apt update && apt install -y gcc make git
#     - rustup default $RUST_VERSION
#     - rustup component add rustfmt clippy
#     - cd bitflow
#     - make fmt_check
#     - make lint
#     - make test

####################################################################################################
## Build
####################################################################################################

build:core:
  stage: build
  image: $GO_IMAGE
  tags:
    - docker
  script:
    - cd core
    - make desktop


build:desktop:
  stage: build
  image: node:$NODE_VERSION
  tags:
    - docker
  script:
    - cd desktop
    - make assets
    - make install
    - make build


build:mobile:
  stage: build
  image: openjdk:8-jdk
  tags:
    - docker
  script:
    - cd mobile
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 build-essential
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    # flutter sdk setup
    - cd $HOME && wget --output-document=flutter-sdk.tar.xz $FLUTTER_VERSION
        && tar -xf flutter-sdk.tar.xz && export PATH=$PATH:$HOME/flutter/bin
        && cd -
    - echo flutter.sdk=$HOME/flutter > android/local.properties
    - flutter config --no-analytics
    - make assets
    - make build

# build:server:
#   stage: build
#   image: $RUST_IMAGE
#   tags:
#     - docker
#   script:
#     - cd server
#     - apt update && apt install -y gcc make git
#     - rustup default $RUST_VERSION
#     - make assets
#     - make build
#   artifacts:
#     paths:
#     - server/dist

build:server:
  stage: build
  image: $GO_IMAGE
  tags:
    - docker
  script:
    - make build


build:website:
  stage: build
  image: node:lts
  tags:
    - docker
  script:
    - apt update && apt install curl make gzip -y
    - cd website/
    - make install
    - make build
    # comrepss files ahead of time
    - gzip -k -9 -r -f dist
  artifacts:
    paths:
    - website/dist


# build:bitflow:
#   stage: build
#   image: $RUST_IMAGE
#   tags:
#     - docker
#   script:
#     - apt update && apt install -y gcc make git
#     - rustup default $RUST_VERSION
#     - cd bitflow
#     - make build
#   artifacts:
#     paths:
#     - bitflow/dist

####################################################################################################
## Package
####################################################################################################

# package:server:
#   stage: package
#   dependencies:
#     - build:server
#   image: docker:stable
#   tags:
#     - docker
#   cache: {}
#   script:
#     - cd server
#     - apk update && apk add make
#     - make docker_build

####################################################################################################
## Release
####################################################################################################

pages: # release:website
  image: alpine:latest
  stage: release
  dependencies:
    - build:website
  only:
    - release-website
  tags:
    - docker
  script:
    - cp -rp website/dist public
  artifacts:
    paths:
      - public/


release:status_page:
  image: docker:stable
  stage: release
  tags:
    - docker
  only:
    - /^status_page-v.*$/
  except:
    - branches
  script:
    - cd status_page/
    - apk update && apk add make
    - make build
    - make docker_login
    - make release


# release:server:stable:
#   # only:
#   #   - tags
#   only:
#     - /^server-v.*$/
#   except:
#     - branches
#   stage: release
#   dependencies:
#     - build:server
#   image: docker:stable
#   tags:
#     - docker
#   cache: {}
#   script:
#     - cd server
#     - apk update && apk add make
#     - make docker_build
#     - make docker_login
#     - make docker_release


# release:bitflow:stable:
#   only:
#     - /^bitflow-v.*$/
#   except:
#     - branches
#   stage: release
#   dependencies:
#     - build:bitflow
#   image: docker:stable
#   tags:
#     - docker
#   cache: {}
#   script:
#     - apk update && apk add make
#     - cd bitflow
#     - make docker_build
#     - make docker_login
#     - make docker_release


# release:server:nightly:
#   only:
#     - schedules
#   stage: release
#   dependencies:
#     - build:server
#   image: docker:stable
#   tags:
#     - docker
#   cache: {}
#   script:
#     - cd server
#     - apk update && apk add make
#     - make docker_build
#     - make docker_login
#     - make docker_release_nightly
#
# release:bitflow:nightly:
#   only:
#     - schedules
#   stage: release
#   dependencies:
#     - build
#   image: docker:stable
#   tags:
#     - docker
#   cache: {}
#   script:
#     - apk update && apk add make
#     - make docker_build
#     - make docker_login
#     - make docker_release_nightly

# default:
#   image: rust:latest
#   before_script:
#     - export PATH="$PATH:$CARGO_HOME/bin"
#     - mdbook --version || cargo install --debug mdbook

# cache:
#   paths:
#     - $CARGO_HOME/bin

# test:android:
#   stage: test
#   script:
#     - cd android
#     - ./gradlew -Pci --console=plain :app:testDebug

# build:apk:
#   stage: build
#   script:
#     - flutter build apk
#   artifacts:
#     paths:
#       - build/app/outputs/apk

# build:bundle:
#   stage: build
#   script:
#     - flutter build appbundle
#   artifacts:
#     paths:
#       - build/app/outputs/bundle
